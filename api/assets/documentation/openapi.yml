openapi: 3.0.3
info:
  description: This is the Mindgest Rest API Documentation
  title: Mindgest API Documentation
  contact:
    email: gp2223@gmail.com
  license:
    name: MIT
    url: https://mit-license.org/
  version: 0.1.0
servers:
  - url: http://mindgest.dei.uc.pt/api
    description: Production Server
  - url: http://localhost:8080/api
    description: Development Server
externalDocs:
  description: Find out more about us
  url: http://github.com/Mindgest
tags:
  - name: General
    description: API Utilities
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
  - name: Authentication
    description: Authentication Endpoints
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
  - name: User
    description: User Managment Endpoints
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
  - name: Appointment
    description: Appointment Managment Endpoints
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
  - name: Process
    description: Process Managment Endpoints
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
  - name: Room
    description: Room Managment Endpoints
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
  - name: Specialty
    description: Specialty Managment Endpoints
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
  - name: Documentation
    description: Rest API Documentation
    externalDocs:
      description: External Documentation
      url: https://github.com/Mindgest/mindgest-backend
paths:
  /healthcheck:
    get:
      tags:
        - General
      summary: Mindgest API Documentation Web Page
      description: Fetch the Swagger UI version of the documentation (static website)
      operationId: docs
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "500":
          $ref: "#/components/responses/InternalServerError"
  /docs:
    get:
      tags:
        - Documentation
      summary: Mindgest API Documentation Web Page
      description: Fetch the Swagger UI version of the documentation (static website)
      operationId: docs
      responses:
        "200":
          description: OK
          content:
            application/html: {}
  /docs/json:
    get:
      tags:
        - Documentation
      summary: Mindgest API Documentation in JSON Format
      operationId: docs-json
      description: Fetch the Swagger UI JSON version of the documentation
      responses:
        "200":
          description: OK
          content:
            application/json:
              encoding:
                historyMetadata:
                  contentType: application/json; charset=utf-8
  /auth/register:
    post:
      summary: Register
      tags:
        - Authentication
      description: User Eegistration Enpoint
      operationId: register
      requestBody:
        $ref: "#/components/requestBodies/Register"
      responses:
        "200":
          $ref: "#/components/responses/RegistrationSuccessful"
        "409":
          $ref: "#/components/responses/UserAlreadyExists"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/login:
    post:
      summary: Login
      tags:
        - Authentication
      description: User Authentication Enpoint
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "200":
          $ref: "#/components/responses/LoginSuccessFull"
        "401":
          $ref: "#/components/responses/LoginUnauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/refresh:
    post:
      summary: Refresh Access Token
      tags:
        - Authentication
      description: Refresh User Access Tokens
      operationId: refresh
      requestBody:
        $ref: "#/components/requestBodies/Refresh"
      responses:
        "201":
          $ref: "#/components/responses/RefreshSuccessful"
        "401":
          $ref: "#/components/responses/UserLoggedOut"
        "403":
          $ref: "#/components/responses/RefreshTokenInvalid"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/verify-account:
    post:
      summary: Verify Account
      tags:
        - Authentication
      description: Verify a user's account (using the verification token)
      operationId: verify-account
      requestBody:
        $ref: "#/components/requestBodies/Verify"
      responses:
        "200":
          $ref: "#/components/responses/VerificationSuccessful"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/account-verification:
    post:
      summary: Send Account Verification Email
      tags:
        - Authentication
      description: |
        Send the user's account verification token by email together with a 
        callback to the frontend of the application, to which the user
        should be redirected when the verification is successful, if 
        such callback is provided.
      operationId: account-verification-email
      requestBody:
        $ref: "#/components/requestBodies/AccountVerification"
      responses:
        "400":
          $ref: "#/components/responses/UserNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/forgot-password:
    post:
      summary: Send Password Reset Email
      tags:
        - Authentication
      description: |
        Send the user's account password reset token by email together with a 
        callback to the frontend of the application, to which the user should
        be redirected for password reset, if such callback is provided.
      requestBody:
        $ref: "#/components/requestBodies/ForgotPassword"
      responses:
        "400":
          $ref: "#/components/responses/UserNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/reset-password:
    post:
      summary: Reset Password
      tags:
        - Authentication
      description: Reset the user's password (using the password reset token)
      requestBody:
        $ref: "#/components/requestBodies/ResetPassword"
      responses:
        "200":
          $ref: "#/components/responses/PasswordResetSuccessful"
        "403":
          $ref: "#/components/responses/PasswordResetTokenInvalid"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/archive:
    post:
      summary: Archives process
      tags:
        - Process
      description: Archives process
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      responses:
        "200":
          $ref: "#/components/responses/ProcessArchived"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/info:
    get:
      summary: All the information of a process
      tags:
        - Process
      description: All the information of a process
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      responses:
        "200":
          $ref: "#/components/responses/ProcessInfo"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/list:
    get:
      summary: Lists every process
      tags:
        - Process
      description: Lists every process
      parameters:
        - in: query
          name: active
          schema:
            type: string
          description: \"true\" or \"false\", any other will cause erro, only lists active processes
        - in: query
          name: speciality
          schema:
            type: string
          description: name of speciality, if speciality doesn't exist an error will occur
      responses:
        "200":
          $ref: "#/components/responses/ProcessList"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/activate:
    post:
      summary: Activates a process
      tags:
        - Process
      description: Activates a process
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      responses:
        "200":
          $ref: "#/components/responses/ProcessActivated"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/create:
    post:
      summary: Creates new process
      tags:
        - Process
      description: Creates new process
      parameters:
      requestBody:
        $ref: "#/components/requestBodies/ProcessCreate"
      responses:
        "200":
          $ref: "#/components/responses/ProcessCreated"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/edit:
    post:
      summary: Edits process
      tags:
        - Process
      description: Edits process
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      requestBody:
        $ref: "#/components/requestBodies/ProcessEdit"
      responses:
        "200":
          $ref: "#/components/responses/ProcessEdited"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/appointments:
    get:
      summary: Lists every appointment from process
      tags:
        - Process
      description: Lists every appointment from process
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      responses:
        "200":
          $ref: "#/components/responses/ProcessAppointments"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/permissions:
    post:
      summary: Edits process permission for user
      tags:
        - Process
      description: Edits process permission for user
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      requestBody:
        $ref: "#/components/requestBodies/ProcessEditPermissions"
      responses:
        "200":
          $ref: "#/components/responses/ProcessEditedPermissions"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/{processId}/createNote:
    post:
      summary: Edits process permission for user
      tags:
        - Process
      description: Edits process permission for user
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      requestBody:
        $ref: "#/components/requestBodies/CreateNote"
      responses:
        "200":
          $ref: "#/components/responses/CreatedNote"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /process/{processId}/listNotes:
    post:
      summary: Edits process permission for user
      tags:
        - Process
      description: Edits process permission for user
      parameters:
        - in: path
          name: processId
          schema:
            type: string
          description: Id of Process
      responses:
        "200":
          $ref: "#/components/responses/ListedNote"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /receipts/list:
    get:
      summary: Lists every receipt, all or by user (if is queried by user)
      tags:
        - Receipts
      description: Lists every receipt, all or by user (if is queried by user)
      parameters:
        - in: query
          name: payed
          schema:
            type: string
          description: \"true\" to list payed receipts, \"false\" to not list them
        - in: query
          name: notPayed
          schema:
            type: string
          description: \"true\" to list not payed receipts, \"false\" to not list them
        - in: query
          name: userId
          schema:
            type: string
          description: if none is selected, lists every receipt, else only lists users receipts
      responses:
        "200":
          $ref: "#/components/responses/ReceiptsListed"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /receipts/pay:
    put:
      summary: Puts receipt as paid
      tags:
        - Receipts
      description: Puts receipt as paid
      parameters:
        - in: path
          name: receiptId
          schema:
            type: string
          description: ID of the receipt
      responses:
        "200":
          $ref: "#/components/responses/ReceiptPayed"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /receipts/create:
    post:
      summary: Creates new receipt
      tags:
        - Receipts
      description: Creates new receipt
      parameters:
        - in: path
          name: appointmentId
          schema:
            type: string
          description: ID of appointment to create receipt
      responses:
        "200":
          $ref: "#/components/responses/ReceiptCreated"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /rooms/create:
    post:
      summary: Creates new room
      tags:
        - Room
      description: Creates new room
      requestBody:
        $ref: "#/components/requestBodies/CreateRoom"
      responses:
        "200":
          $ref: "#/components/responses/RoomCreated"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /rooms/list:
    get:
      summary: Lists all rooms
      tags:
        - Room
      description: Lists all rooms
      responses:
        "200":
          $ref: "#/components/responses/RoomsListed"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /rooms/listAppointmentsRoom:
    get:
      summary: Lists all appointments of the rooms or a specific room on a specific date
      tags:
        - Room
      description: Lists all appointments of the rooms or a specific room on a specific date
      parameters:
        - in: path
          name: date
          schema:
            type: string
          description: Date to get the appointments
          example: YYYY/MM/DD
        - in: path
          name: room
          schema:
            type: string
          description: ID of the specific room to get appointments
      responses:
        "200":
          $ref: "#/components/responses/RoomsAppointmentListed"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /statistics/:
    get:
      summary:
        Statistics information sent to email (not currently sending email only returning the info)
      tags:
        - Statistics
      description:
        Statistics information sent to email (not currently sending email only returning the info)
      parameters:
        - in: path
          name: startDate
          schema:
            type: string
          description: Date to get the appointments
          example: YYYY/MM/DD
        - in: path
          name: endDate
          schema:
            type: string
          description: Date to get the appointments
          example: YYYY/MM/DD
        - in: path
          name: therapistId
          schema:
            type: string
          description: id of therapist to filter
        - in: path
          name: specialityId
          schema:
            type: string
          description: id of speciality to filter
        - in: path
          name: processId
          schema:
            type: string
          description: id of processId to filter
      responses:
        "200":
          $ref: "#/components/responses/Statistics"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /speciality/list:
    get:
      summary: Returns a list with all the specialities in the database.
      tags:
        - Speciality
      description: Returns a list with all the specialities in the database.
      responses:
        "200":
          $ref: "#/components/responses/SpecialitiesListed"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /speciality/create:
    post:
      summary: Creates a new speciality.
      tags:
        - Speciality
      description: Creates a new speciality.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                speciality:
                  type: string
                  description: name of the speciality.
              example: Especialidade-A
      responses:
        "200":
          $ref: "#/components/responses/SpecialitiesCreate"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /appointment/list:
    post:
      summary: Lists all of the appointments of the given user id, or all if the id = -1.
      tags:
        - Appointment
      description: Lists all of the appointments of the given user id, or all if the id = -1.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filterId:
                  type: number
                  description: id of the user or -1 for all the users.
      responses:
        "200":
          $ref: "#/components/responses/AppointmentsListed"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /appointment/list/active:
    post:
      summary: Lists all of the active appointments of the given user id, or all if the id = -1.
      tags:
        - Appointment
      description: Lists all of the active appointments of the given user id, or all if the id = -1.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filterId:
                  type: number
                  description: id of the user or -1 for all the users.
      responses:
        "200":
          $ref: "#/components/responses/AppointmentsActiveListed"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /appointment/info:
    post:
      summary: Returns the information of an appointment
      tags:
        - Appointment
      description: Returns the information of an appointment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentId:
                  type: number
                  description: id of the appointment.
      responses:
        "200":
          $ref: "#/components/responses/AppointmentInfo"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /appointment/listLastTerminated:
    post:
      summary: Returns the list of finished appointments in the last 24h.
      tags:
        - Appointment
      description: Returns the list of finished appointments in the last 24h.
      responses:
        "200":
          $ref: "#/components/responses/AppointmentListLastTerminated"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /appointment/create:
    post:
      summary: Creates an appointment in the database.
      tags:
        - Appointment
      description: Creates an appointment in the database.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                processId:
                  type: number
                  description: id of the process.
                online:
                  type: boolean
                  description: True if the appointment is going to be online, otherwise, false.
                roomId:
                  type: number
                  description: The id of the room for the appointment.
                priceTableId:
                  type: number
                  description: The id of the price in the table of prices.
                startDate:
                  type: string
                  description: start-date of the appointment
                  example: 2022-12-24T15:03:00.000Z
                endDate:
                  type: string
                  description: end-date of the appointment
                  example: 2022-12-24T15:03:00.000Z
      responses:
        "200":
          $ref: "#/components/responses/AppointmentCreate"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /appointment/archive:
    put:
      summary: Archives an appointment in the database.
      tags:
        - Appointment
      description: Archives an appointment in the database.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentId:
                  type: number
                  description: id of the appointment.
      responses:
        "200":
          $ref: "#/components/responses/AppointmentArchive"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /appointment/edit:
    put:
      summary: Edits an appointment in the database.
      tags:
        - Appointment
      description: Edits an appointment in the database.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentId:
                  type: number
                  description: id of the appointment.
                appointmentRoomId:
                  type: number
                  description: The id of the room for the appointment.
                appointmentStart:
                  type: string
                  description: start-date of the appointment
                  example: 2022-12-24T15:03:00.000Z
                appointmentEnd:
                  type: string
                  description: end-date of the appointment
                  example: 2022-12-24T15:03:00.000Z
      responses:
        "200":
          $ref: "#/components/responses/AppointmentEdit"
        "403":
          $ref: "#/components/responses/VerificationTokenInvalid"
        "401":
          $ref: "#/components/responses/NoAuthorization"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    Admin:
      type: object
      properties:
        name:
          type: string
          description: The admin's name
        email:
          type: string
          format: email
          description: The admin's email address
        password:
          type: string
          description: The admin's password
        address:
          type: string
          description: The admin's home address
        birthDate:
          type: string
          format: date-time
          description: The admin's birth date
        phoneNumber:
          type: number
          format: int64
          description: The admin's phone number
    Therapist:
      type: object
      properties:
        name:
          type: string
          description: The therapist's name
        email:
          type: string
          format: email
          description: The therapist's email address
        password:
          type: string
          description: The therapist's password
        address:
          type: string
          description: The therapist's home address
        birthDate:
          type: string
          format: date-time
          description: The therapist's birth date
        phoneNumber:
          type: number
          format: int64
          description: The therapist's phone number
        healthSystem:
          type: string
          nullable: true
          description: The therapist's health system
        license:
          type: string
          description: The therapist's fiscal number
        taxNumber:
          type: number
          format: int64
          description: The therapist's fiscal number
    Intern:
      type: object
      properties:
        name:
          type: string
          description: The intern's name
        email:
          type: string
          format: email
          description: The intern's email address
        password:
          type: string
          description: The intern's password
        address:
          type: string
          description: The intern's home address
        birthDate:
          type: string
          format: date-time
          description: The intern's birth date
        phoneNumber:
          type: number
          format: int64
          description: The intern's phone number
    Accountant:
      type: object
      properties:
        name:
          type: string
          description: The accountant's name
        email:
          type: string
          format: email
          description: The accountant's email address
        password:
          type: string
          description: The accountant's password
        address:
          type: string
          description: The accountant's home address
        birthDate:
          type: string
          format: date-time
          description: The accountant's birth date
        phoneNumber:
          type: number
          format: int64
          description: The accountant's fiscal number
        taxNumber:
          type: number
          format: int64
          description: The accountant's fiscal number
    Guard:
      properties:
        name:
          type: string
          description: The guard's email account
        email:
          type: string
          format: email
          description: The guard's email address
        password:
          type: string
          format: password
          description: The guard's password
        address:
          type: string
          description: The guard's home address
        birthDate:
          type: string
          description: The guard's birth date
          format: date-time
        phoneNumber:
          type: number
          description: The guard's phone number
          format: int64
        taxNumber:
          type: number
          description: The guard's fiscal number
          format: int64
  requestBodies:
    Login:
      description: The body payload object
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              email:
                type: string
                description: The user's email
                example: "johndoe@student.dei.uc.pt"
              password:
                type: string
                description: The user's password
                example: "password1234"
      required: true
    Register:
      description: Information of the user to register
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            oneOf:
              - $ref: "#/components/schemas/Therapist"
              - $ref: "#/components/schemas/Admin"
              - $ref: "#/components/schemas/Guard"
              - $ref: "#/components/schemas/Intern"
              - $ref: "#/components/schemas/Accountant"
            properties:
              role:
                type: string
                description: User's role
                enum:
                  - therapist
                  - admin
                  - guard
                  - intern
                  - accountant
          example:
            role: therapist
            name: John Doe
            email: johndoe@student.dei.uc
            password: password1234
            address: Wall Streed
            birthDate: "1990-11-21T23:50:28.538Z"
            phoneNumber: 9219231942
            healthSystem: adse
            license: "51382"
            taxNumber: 283192189
    Refresh:
      description: The Refresh Token
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              refreshToken:
                type: string
                description: The user's refresh token
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwZXJzb24iOjIsInNlc3Npb24iOnsiaXAiOiI6OjEiLCJ1c2VyQWdlbnQiOiJQb3N0bWFuUnVudGltZS83LjI5LjIifSwiaWF0IjoxNjY5MDY4MDYxLCJleHAiOjE2NjkwNzE2NjF9.9ydDW20vY2gGc43q86gsfsyEQOiSQkabb8xkmI91QhQ
    Verify:
      description: The verification token (sent by email)
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              token:
                type: string
                description: The user's verification token
                example: eyJVCJ9.ZXJzb24iOjIsInNlhbGciOiJIUzI1NiIsInR5cCI6IeyJwkpXc3Npb24iOnsiaXAiOiI6OjEiLCJ1c2VyQWdlbnQiOiJQb3N0bWFuUnVudGltZS83LjI5LjIifSwiaWF0IjoxNjY5MDY4MDYxLCJleHAiOjE2NjkwNzE2NjF9.9ydDW20vY2gGc43q86gsfsyEQOiSQkabb8xkmI91QhQ
    AccountVerification:
      description: |
        The email address of the account owner to which the verification email should be sent 
        (if the callback is supplied) otherwise a verification token will be sent on the 
        response body.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              email:
                type: string
                description: The email of the user to verify
                example: johndoe@student.dei.uc.pt
              callback:
                type: string
                description: |
                  The callback to the frontend of the application. The verification token 
                  will be appended to the callback (as a request parameter)
                example: "http://frontend.com/verification-page"
                nullable: true
    ForgotPassword:
      description: |
        The email address of the account owner to which the password reset email should be sent 
        (if the callback is supplied) otherwise a verification token will be sent on the 
        response body.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              email:
                type: string
                description: The email of the user that wants to reset the password
                example: johndoe@student.dei.uc.pt
              callback:
                type: string
                description: |
                  The callback to the frontend of the application. The password reset token 
                  will be appended to the callback (as a request parameter)
                example: "http://frontend.com/password-reset-page"
                nullable: true
    ResetPassword:
      description: The password reset token (sent by email)
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              token:
                type: string
                description: The user's password reset token
                example: eyJVCJ9OiJIUzI1NiIsInR5cCI6IeyJwkpXc3Npb24iOnsiaXAiOiI6OjEiLCJ1c2VyQWdlbnQiOiJQb3N0bWFuUnVudGltZS83LjI5LjIifSwiaWF0IjoxNjY5MDY4MDYxLCJleHAiOjE2NjkwNzE2.ZXJzb24iOjIsInNlhbGciNjF9.9ydDW20vY2gGc43q86gsfsyEQOiSQkabb8xkmI91QhQ
    Token:
      description: JWT
      content:
        application/json:
          schema:
            properties:
              token:
                type: string
                summary: jwt from login
    ProcessCreate:
      description: Creates a new process
      content:
        application/json:
          schema:
            properties:
              patientIds:
                type: array
                items:
                  type: integer
                  summary: ids of patients (in case its a process for more than 1 patient)
              therapistId:
                type: integer
                summary: Id of therapist in charge of the proccess
              speciality:
                type: string
                summary: Type of process, types need to be already created beforehand
              remarks:
                type: string
                summary: any extra info the therapeut creating the process might wanna add
              colaborators:
                type: array
                items:
                  type: integer
                  summary: ids of collaborators
    ProcessEdit:
      description: Edits process
      content:
        application/json:
          schema:
            properties:
              therapistId:
                type: integer
                summary: Id of therapist in charge of the proccess
              speciality:
                type: string
                summary: Type of process, types need to be already created beforehand
              remarks:
                type: string
                summary: any extra info the therapeut creating the process might wanna add
              colaborators:
                type: array
                items:
                  type: integer
                  summary: ids of collaborators
    ProcessEditPermissions:
      description: Edits process
      content:
        application/json:
          schema:
            properties:
              collaboratorId:
                type: integer
                summary: Id of the collaborator to change permissions
              appoint:
                type: boolean
                summary: True if user has permissions to create appointments and False if not
              statitics:
                type: boolean
                summary: True if user has permissions to see statitics and False if not
              ditProcess:
                type: boolean
                summary: True if user has permissions to edit process and False if not
              editPatient:
                type: boolean
                summary: True if user has permissions to edit patient and False if not
              archive:
                type: boolean
                summary: True if user has permissions to archive and False if not
              see:
                type: boolean
                summary: True if user has permissions to see process info and False if not
    CreateNote:
      description: Creates new note in process
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                summary: title of note
              body:
                type: string
                summary: what's being written in the note
    CreateRoom:
      description: Create a new Room
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              name:
                type: string
                summary: name for room
  responses:
    LoginSuccessFull:
      description: Login Successful
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The user was created successfully
              accessToken:
                type: string
                description: The access token to be used for authorization
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWRtaW4iOmZhbHNlLCJyb2xlIjoiaW50ZXJuIiwiaWF0IjoxNjY5MDY4MDYxLCJleHAiOjE2NjkwNjg5NjF9.xMacrxoiqpUg6frCEYCqNnSHedaI1QYiml6RgKmYeL4
              refreshToken:
                type: string
                description: The refresh token to be used for adquiring a new access token
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwZXJzb24iOjIsInNlc3Npb24iOnsiaXAiOiI6OjEiLCJ1c2VyQWdlbnQiOiJQb3N0bWFuUnVudGltZS83LjI5LjIifSwiaWF0IjoxNjY5MDY4MDYxLCJleHAiOjE2NjkwNzE2NjF9.9ydDW20vY2gGc43q86gsfsyEQOiSQkabb8xkmI91QhQ
    AccountNotVerified:
      description: The user did not verify the account
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The account is not verified!
    AccountNotAproved:
      description: The account is not approved by an admin. Contant an admin to solve the issue
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The account was not approved!
    InvalidPassword:
      description: The user did not verify its account's email
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The account was not approved by an admin!
    LoginUnauthorized:
      description: Login Unauthorized.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            example:
              message: Login. Invalid credentials
            oneOf:
              - $ref: "#/components/responses/InvalidPassword"
              - $ref: "#/components/responses/AccountNotAproved"
              - $ref: "#/components/responses/AccountNotVerified"
    InternalServerError:
      description: An internal error has occurred while processing the request
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            example:
              message: An internal error has occurred while processing the request
            properties:
              message:
                type: string
                description: Ups... Something went wrong
    UserNotFound:
      description: The user is not registered in the application
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: The user is not registered in the application
                example: The user does not exist!

    UserAlreadyExists:
      description: The user already has an account in the application
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: A user with this email already exists!
    RegistrationSuccessful:
      description: Registration Successful
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The user account was created successfully!
    RefreshSuccessful:
      description: Token Refresh Successful
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: User's access token refreshed
              accessToken:
                type: string
                description: The access token to be used for authorization
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiYWRtaW4iOmZhbHNlLCJyb2xlIjoiaW50ZXJuIiwiaWF0IjoxNjY5MDY4MDYxLCJleHAiOjE2NjkwNjg5NjF9.xMacrxoiqpUg6frCEYCqNnSHedaI1QYiml6RgKmYeL4
              refreshToken:
                type: string
                description: The refresh token to be used for adquiring a new access token
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwZXJzb24iOjIsInNlc3Npb24iOnsiaXAiOiI6OjEiLCJ1c2VyQWdlbnQiOiJQb3N0bWFuUnVudGltZS83LjI5LjIifSwiaWF0IjoxNjY5MDY4MDYxLCJleHAiOjE2NjkwNzE2NjF9.9ydDW20vY2gGc43q86gsfsyEQOiSQkabb8xkmI91QhQ
    UserLoggedOut:
      description: Refresh request unauthorized.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Unauthorized. The user must login first and obtain an access token
    RefreshTokenInvalid:
      description: The user's Refresh Token expired or is invalid
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Refresh token invalid or expired
    VerificationTokenInvalid:
      description: The user's Verification Token is expired/invalid
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Verification token invalid or expired
    VerificationSuccessful:
      description: Verification Successful.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Account [already] verified successfully!
    PasswordResetSuccessful:
      description: Password Reset Successful.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Password Reset Successful!
    PasswordResetTokenInvalid:
      description: The user's password reset token is expired/invalid
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Password reset token invalid or expired
    ProcessInfo:
      description: Process Information
      content:
        application/json:
          schema:
            properties:
              therapistId:
                type: integer
                example: 1
              ref:
                type: string
                example: "process ref"
              colaborators:
                type: array
                items:
                  type: string
                  example: "Marta Santos (Em Estágio)"
              utent:
                type: string
                example: "Ricardo Maria"
              active:
                type: boolean
                summary: True if process is active, false if archived or not yet approved
              financialSituation:
                type: boolean
                summary: True if everything in order, false if patient has late payments
              speciality:
                type: string
                example: "Familiar"
    NoAuthorization:
      description: User doesn't have authorization
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: User doesn't have authorization
    ProcessArchived:
      description: Process Archived
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Process Archived
    ProcessList:
      description: List of processes
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              list:
                type: object
                properties:
                  therapistListing:
                    type: array
                    items:
                      type: string
                      example: Marta Santos
                  patientName:
                    type: string
                    example: Ricardo Maria
                  refCode:
                    type: string
                    example: 23fdfd4e3
                  nextAppointment:
                    type: string
                    summary: |
                      No next Appointment if no appointment has been made or the date, in string
                      format, of next date
    ProcessActivated:
      description: Process Activated
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Process Activated
    ProcessCreated:
      description: Process Created
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Process Created
    ProcessEdited:
      description: Process Edited
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Process Edited
    ProcessAppointments:
      description: All appointments from a process
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              online:
                type: boolean
                summary: True if appointment is online false if on site
              start_date:
                type: string
                example: FALTA ADICIONAR EXEMPLO
              end_date:
                type: string
                example: FALTA ADICIONAR EXEMPLO
              room:
                type: string
                example: Sala de aula C4.4
              type:
                type: string
                example: familiar
    ProcessEditedPermissions:
      description: Process Permissions Updated
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Permission updated
    ReceiptsListed:
      description: Item returned
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                description: array with receipts
                items:
                  type: object
                  properties:
                    patientName:
                      type: string
                      description: The patients's name
                    mainTherapist:
                      type: string
                      description: Process responsable therapist
                    ref:
                      type: string
                      description: reference of receipt
                    date:
                      type: string
                      description: date of appointment
    ReceiptPayed:
      description: Receipt Payed
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Receipt Payed!
    ReceiptCreated:
      description: Receipt Payed
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Receipt Created
    CreatedNote:
      description: Note Created
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Note Created
    ListedNote:
      description: List of process notes
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      description: Title of Note
                    body:
                      type: string
                      description: Body of the note
                    date:
                      type: string
                      description: Date the note was created
    RoomCreated:
      description: Room Created
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: Room Created
    RoomsListed:
      description: List of Rooms
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: name of room
                    id:
                      type: number
                      name: id of room
    RoomsAppointmentListed:
      description: List of Rooms
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    room:
                      type: string
                      description: name of the room
                    roomId:
                      type: number
                      description: id of the room
                    appointmentsRoom:
                      type: array
                      description: appointments of the room
                      items:
                        type: object
                        properties:
                          title:
                            type: string
                            description: Title of the appointment
                            example: Dr João Pedro Esp-A
                          id:
                            type: number
                            description: if of appointment
                          startDate:
                            type: string
                            description: start-date of appointment
                            example: 2022-12-24T15:03:00.000Z
                          endDate:
                            type: string
                            description: start-date of appointment
                            example: 2022-12-24T15:03:00.000Z
    Statistics:
      description: Statistics information
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: object
                properties:
                  totalAppointments:
                    type: number
                    description: total number of appointments from active processes
                  specialitiesAppointments:
                    type: array
                    description:
                      total number of appointments from active processes from each speciality
                    items:
                      type: object
                      properties:
                        speciality:
                          type: string
                        total:
                          type: number
                  processAppointments:
                    type: array
                    description:
                      total number of appointments from active processes from each process
                    items:
                      type: object
                      properties:
                        processId:
                          type: string
                        total:
                          type: number
                  therapistsApointments:
                    type: array
                    description:
                      total number of appointments from active processes from each therapist
                    items:
                      type: object
                      properties:
                        therapist:
                          type: string
                        total:
                          type: number
    SpecialitiesListed:
      description: List of Specialities
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    speciality:
                      type: string
                      description: name of the speciality
    SpecialitiesCreate:
      description: Create a speciality.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The speciality has been successfully created.
    AppointmentsListed:
      description: List of appointments
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    appointmentStartTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    appointmentEndTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    appointmentRoom:
                      type: string
                      description: The name of the room of the appoitment
                    therapists:
                      type: array
                      description: list of the processe's therapists
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the therapist
                    speciality:
                      type: string
                      description: name of the speciality
    AppointmentsActiveListed:
      description: List of the active appointments
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    appointmentStartTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    appointmentEndTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    appointmentRoom:
                      type: string
                      description: The name of the room of the appoitment
                    therapists:
                      type: array
                      description: list of the processe's therapists
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the therapist
                    speciality:
                      type: string
                      description: name of the speciality
    AppointmentListLastTerminated:
      description: List of the finished appointments in the last 24h.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    appointmentStartTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    appointmentEndTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    patients:
                      type: array
                      description: list of the patients of the process
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the patient
    AppoitmentInfo:
      description: Appointment's information
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: array
                items:
                  type: object
                  properties:
                    appointmentStartTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    appointmentEndTime:
                      type: string
                      description: start-date of the appointment
                      example: 2022-12-24T15:03:00.000Z
                    appointmentRoom:
                      type: string
                      description: The name of the room of the appoitment
                    therapists:
                      type: array
                      description: list of the processe's therapists
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the therapist
                    interns:
                      type: array
                      description: list of the processe's interns
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the intern
                    patients:
                      type: array
                      description: list of the processe's patients
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the patient
                    speciality:
                      type: string
                      description: name of the speciality
                    processRef:
                      type: string
                      description: Reference of the process.
    AppointmentCreate:
      description: Create an appointment.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The appointment has been successfully created.
    AppointmentEdit:
      description: Edits an appointment.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The appointment has been successfully updated.
    AppointmentArchive:
      description: Archive an appointment.
      content:
        application/json:
          encoding:
            historyMetadata:
              contentType: application/json; charset=utf-8
          schema:
            properties:
              message:
                type: string
                description: A message describing the request result
                example: The appointment has been successfully archived.
  securitySchemes:
    AccessToken:
      type: apiKey
      in: header
      name: authorization
security:
  - AccessToken: []

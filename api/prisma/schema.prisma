generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "debian-openssl-1.1.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "../../docs/db"
  outputName          = "db.dbml"
  projectName         = "MindGest"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "MindGest Database"
}

model person {
  id            BigInt          @id @default(autoincrement())
  name          String
  email         String
  password      String
  address       String
  birth_date    DateTime        @db.Date
  photo         String?
  phone_number  BigInt
  verified      Boolean
  active        Boolean
  approved      Boolean
  tax_number    BigInt?
  accountant    accountant?
  admin         admin?
  guard         guard?
  intern        intern?
  notifications notifications[]
  patient       patient?
  permissions   permissions[]
  therapist     therapist?
}

model therapist {
  extern               Boolean
  license              String?
  health_system        String?
  person_id            BigInt                 @id
  person               person                 @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_fk1")
  therapist_process    therapist_process[]
  therapist_speciality therapist_speciality[]
}

model guard {
  person_id BigInt @id
  person    person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "guard_fk1")
}

model admin {
  person_id BigInt @id
  person    person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "admin_fk1")
}

model intern {
  person_id      BigInt           @id
  person         person           @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "intern_fk1")
  intern_process intern_process[]
}

model accountant {
  person_id BigInt @id
  person    person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accountant_fk1")
}

model patient {
  health_number   BigInt
  request         String
  remarks         String?
  patienttype_id  BigInt
  person_id       BigInt            @id
  patienttype     patienttype       @relation(fields: [patienttype_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_fk1")
  person          person            @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_fk2")
  patient_process patient_process[]
  profession      profession[]
  school          school[]
}

model school {
  id                BigInt  @id @default(autoincrement())
  name              String
  course            String
  grade             BigInt? @unique
  patient_person_id BigInt
  patient           patient @relation(fields: [patient_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "school_fk1")
}

model appointment {
  slot_id             BigInt                @id @default(autoincrement())
  slot_start_date     DateTime              @db.Timestamp(6)
  slot_end_date       DateTime              @db.Timestamp(6)
  archived_date       DateTime?             @db.Timestamp(6)
  active              Boolean?
  online              Boolean?
  room_id             BigInt
  pricetable_id       String
  room                room                  @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_fk1")
  pricetable          pricetable            @relation(fields: [pricetable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_fk2")
  appointment_process appointment_process[]
  receipt             receipt[]
}

model appointment_process {
  appointment_slot_id BigInt
  process_id          BigInt
  appointment         appointment @relation(fields: [appointment_slot_id], references: [slot_id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_process_fk1")
  process             process     @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_process_fk2")

  @@id([appointment_slot_id, process_id])
}

model intern_process {
  intern_person_id BigInt
  process_id       BigInt
  intern           intern  @relation(fields: [intern_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "intern_process_fk1")
  process          process @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "intern_process_fk2")

  @@id([intern_person_id, process_id])
}

model liable {
  id             BigInt           @id @default(autoincrement())
  name           String
  email          String
  phonenumber    BigInt
  type           String
  remarks        String?
  process_liable process_liable[]
}

model notifications {
  id        BigInt   @id @default(autoincrement())
  ref       String
  datetime  DateTime @default(now())
  data      String
  type      String
  seen      Boolean
  settled   Boolean
  person_id BigInt
  person    person   @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_fk1")
}

model patient_process {
  patient_person_id BigInt
  process_id        BigInt
  patient           patient @relation(fields: [patient_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "patient_process_fk1")
  process           process @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_process_fk2")

  @@id([patient_person_id, process_id])
}

model patienttype {
  id      BigInt    @id @default(autoincrement())
  type    String
  patient patient[]
}

model permissions {
  editprocess  Boolean @default(false)
  see          Boolean @default(false)
  appoint      Boolean @default(false)
  statitics    Boolean @default(false)
  editpatitent Boolean @default(false)
  archive      Boolean @default(false)
  isMain       Boolean @default(false)
  id           BigInt  @id @default(autoincrement())
  person_id    BigInt
  process_id   BigInt
  person       person  @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissions_fk1")
  process      process @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissions_fk2")
}

model pricetable {
  id          String        @id
  type        String
  price       Float         @db.Real
  appointment appointment[]
}

model process {
  id                    BigInt                @id @default(autoincrement())
  ref                   String                @unique @db.VarChar(512)
  active                Boolean
  remarks               String?
  speciality_speciality String
  appointment_process   appointment_process[]
  intern_process        intern_process[]
  notes                 notes[]
  patient_process       patient_process[]
  permissions           permissions[]
  speciality            speciality            @relation(fields: [speciality_speciality], references: [speciality], onDelete: NoAction, onUpdate: NoAction, map: "process_fk1")
  process_liable        process_liable[]
  therapist_process     therapist_process[]
}

model notes {
  id         BigInt   @id @default(autoincrement())
  title      String
  body       String
  process_id BigInt
  datetime   DateTime @db.Date
  process    process  @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_notes_fk1")
}

model process_liable {
  process_id BigInt
  liable_id  BigInt
  process    process @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_liable_fk1")
  liable     liable  @relation(fields: [liable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_liable_fk2")

  @@id([process_id, liable_id])
}

model profession {
  id                BigInt  @id @default(autoincrement())
  name              String  @unique
  patient_person_id BigInt
  patient           patient @relation(fields: [patient_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "profession_fk1")
}

model receipt {
  id                  BigInt      @id @default(autoincrement())
  datetime            DateTime    @default(now())
  payed               Boolean?    @default(false)
  appointment_slot_id BigInt
  appointment         appointment @relation(fields: [appointment_slot_id], references: [slot_id], onDelete: NoAction, onUpdate: NoAction, map: "receipt_fk1")
}

model room {
  id          BigInt        @id @default(autoincrement())
  name        String        @unique
  appointment appointment[]
}

model speciality {
  speciality           String                 @id
  code                 String
  description          String
  process              process[]
  therapist_speciality therapist_speciality[]
}

model therapist_process {
  therapist_person_id BigInt
  process_id          BigInt
  therapist           therapist @relation(fields: [therapist_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_process_fk1")
  process             process   @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_process_fk2")

  @@id([therapist_person_id, process_id])
}

model therapist_speciality {
  therapist_person_id   BigInt
  speciality_speciality String
  therapist             therapist  @relation(fields: [therapist_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_speciality_fk1")
  speciality            speciality @relation(fields: [speciality_speciality], references: [speciality], onDelete: NoAction, onUpdate: NoAction, map: "therapist_speciality_fk2")

  @@id([therapist_person_id, speciality_speciality])
}

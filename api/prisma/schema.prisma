generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id           BigInt      @id @default(autoincrement())
  name         String      @db.VarChar(512)
  email        String      @unique @db.VarChar(512)
  password     String      @db.VarChar(512)
  address      String      @db.VarChar(512)
  birth_date   DateTime    @db.Date
  phone_number BigInt
  active       Boolean
  aproved      Boolean
  verified     Boolean
  photo        String?     @db.VarChar(512)
  accountant   Accountant?
  guard        Guard?
  intern       Intern?
  patient      Patient?
  therapist    Therapist?
}

model Patient {
  tax_number      BigInt
  health_number   BigInt
  request         String           @db.VarChar(512)
  remarks         String?          @db.VarChar(512)
  patien_type_id  BigInt
  person_id       BigInt           @id
  patient_type    PatientType      @relation(fields: [patien_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_fk1")
  person          Person           @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_fk2")
  patient_process PatientProcess[]
  profession      Profession[]
  school          School[]
}

model Therapist {
  extern                 Boolean
  admin                  Boolean
  cedula                 String                  @db.VarChar(512)
  healthSystem           String?                 @db.VarChar(512)
  person_id              BigInt                  @id
  person                 Person                  @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_fk1")
  therapist_availability TherapistAvailability[]
  therapist_process      TherapistProcess[]
}

model Guard {
  person_id BigInt @id
  person    Person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "guard_fk1")
}

model Accountant {
  person_id BigInt @id
  person    Person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accountant_fk1")
}

model Intern {
  person_id           BigInt               @id
  person              Person               @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "intern_fk1")
  intern_availability InternAvailability[]
  intern_process      InternProcess[]
}

model Appointment {
  online              Boolean?
  room_id             BigInt
  pricetable_id       String               @db.VarChar(512)
  slot_id             BigInt               @id
  slot_start_date     DateTime             @db.Timestamp(6)
  slot_end_date       DateTime             @db.Timestamp(6)
  room                Room                 @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_fk1")
  pricetable          PriceTable           @relation(fields: [pricetable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_fk2")
  appointment_process AppointmentProcess[]
  receipt             Receipt[]
}

model AppointmentProcess {
  appointment_slot_id BigInt
  process_id          BigInt
  appointment         Appointment @relation(fields: [appointment_slot_id], references: [slot_id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_process_fk1")
  process             Process     @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_process_fk2")

  @@id([appointment_slot_id, process_id])
}

model Availability {
  slot_id                BigInt                  @id
  slot_start_date        DateTime                @db.Timestamp(6)
  slot_end_date          DateTime                @db.Timestamp(6)
  intern_availability    InternAvailability[]
  therapist_availability TherapistAvailability[]
}

model InternAvailability {
  intern_person_id     BigInt
  availability_slot_id BigInt
  intern               Intern       @relation(fields: [intern_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "intern_availability_fk1")
  availability         Availability @relation(fields: [availability_slot_id], references: [slot_id], onDelete: NoAction, onUpdate: NoAction, map: "intern_availability_fk2")

  @@id([intern_person_id, availability_slot_id])
}

model InternProcess {
  intern_person_id BigInt
  process_id       BigInt
  intern           Intern  @relation(fields: [intern_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "intern_process_fk1")
  process          Process @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "intern_process_fk2")

  @@id([intern_person_id, process_id])
}

model Liable {
  id             BigInt          @id @default(autoincrement())
  name           String          @db.VarChar(512)
  email          String          @db.VarChar(512)
  phonenumber    BigInt
  type           String          @db.VarChar(512)
  remarks        String?         @db.VarChar(512)
  process_liable ProcessLiable[]
}

model PatientProcess {
  patient_person_id BigInt
  process_id        BigInt
  patient           Patient @relation(fields: [patient_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "patient_process_fk1")
  process           Process @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_process_fk2")

  @@id([patient_person_id, process_id])
}

model PatientType {
  id      BigInt    @id
  type    String    @db.VarChar(512)
  patient Patient[]
}

model PriceTable {
  id          String        @id @db.VarChar(512)
  type        String        @db.VarChar(512)
  price       Float         @db.Real
  appointment Appointment[]
}

model Process {
  id                  BigInt               @id @default(autoincrement())
  ref                 String               @unique @db.VarChar(512)
  active              Boolean
  appointment_process AppointmentProcess[]
  intern_process      InternProcess[]
  patient_process     PatientProcess[]
  process_liable      ProcessLiable[]
  therapist_process   TherapistProcess[]
}

model ProcessLiable {
  process_id BigInt
  liable_id  BigInt
  process    Process @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_liable_fk1")
  liable     Liable  @relation(fields: [liable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_liable_fk2")

  @@id([process_id, liable_id])
}

model Profession {
  id                BigInt  @id
  name              String  @unique @db.VarChar(512)
  patient_person_id BigInt
  patient           Patient @relation(fields: [patient_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "profession_fk1")
}

model Receipt {
  id                  BigInt      @id @default(autoincrement())
  ref                 String      @unique @db.VarChar(512)
  name                String      @db.VarChar(512)
  description         String      @db.VarChar(512)
  datetime            DateTime    @db.Timestamp(6)
  therapist           String?     @db.VarChar(512)
  appointment_slot_id BigInt
  appointment         Appointment @relation(fields: [appointment_slot_id], references: [slot_id], onDelete: NoAction, onUpdate: NoAction, map: "receipt_fk1")
}

model Room {
  id          BigInt        @id @default(autoincrement())
  name        String        @unique @db.VarChar(512)
  appointment Appointment[]
}

model School {
  id                BigInt  @id @default(autoincrement())
  name              BigInt
  course            String  @db.VarChar(512)
  grade             BigInt? @unique
  patient_person_id BigInt
  patient           Patient @relation(fields: [patient_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "school_fk1")
}

model TherapistAvailability {
  therapist_person_id  BigInt
  availability_slot_id BigInt
  therapist            Therapist    @relation(fields: [therapist_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_availability_fk1")
  availability         Availability @relation(fields: [availability_slot_id], references: [slot_id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_availability_fk2")

  @@id([therapist_person_id, availability_slot_id])
}

model TherapistProcess {
  therapist_person_id BigInt
  process_id          BigInt
  therapist           Therapist @relation(fields: [therapist_person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_process_fk1")
  process             Process   @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "therapist_process_fk2")

  @@id([therapist_person_id, process_id])
}
